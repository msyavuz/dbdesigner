import type { Dialect } from "./index";

export const dialectTypeMap: Record<Dialect, string[]> = {
  general: [
    "integer",
    "text", 
    "boolean",
    "date",
    "timestamp",
    "uuid",
    "json",
    "float",
    "double",
    "decimal",
    "blob",
  ],
  postgresql: [
    "integer",
    "bigint",
    "smallint",
    "text",
    "varchar",
    "char",
    "boolean",
    "date",
    "timestamp",
    "timestamptz",
    "uuid",
    "json",
    "jsonb",
    "real",
    "double precision",
    "numeric",
    "bytea",
    "inet",
    "cidr",
    "macaddr",
    "point",
    "line",
    "lseg",
    "box",
    "path",
    "polygon",
    "circle",
    "array",
  ],
  mysql: [
    "int",
    "bigint",
    "smallint",
    "tinyint",
    "mediumint",
    "varchar",
    "char",
    "text",
    "mediumtext",
    "longtext",
    "boolean",
    "bit",
    "date",
    "datetime",
    "timestamp",
    "time",
    "year",
    "json",
    "float",
    "double",
    "decimal",
    "blob",
    "mediumblob",
    "longblob",
    "binary",
    "varbinary",
    "enum",
    "set",
  ],
  sqlite: [
    "integer",
    "text",
    "real",
    "blob",
    "numeric",
  ],
  sqlserver: [
    "int",
    "bigint",
    "smallint",
    "tinyint",
    "varchar",
    "nvarchar",
    "char",
    "nchar",
    "text",
    "ntext",
    "bit",
    "date",
    "datetime",
    "datetime2",
    "datetimeoffset",
    "time",
    "timestamp",
    "uniqueidentifier",
    "float",
    "real",
    "decimal",
    "money",
    "smallmoney",
    "binary",
    "varbinary",
    "image",
    "xml",
    "geography",
    "geometry",
  ],
  oracle: [
    "number",
    "varchar2",
    "char",
    "nvarchar2",
    "nchar",
    "clob",
    "nclob",
    "date",
    "timestamp",
    "timestamp with time zone",
    "timestamp with local time zone",
    "interval year to month",
    "interval day to second",
    "binary_float",
    "binary_double",
    "blob",
    "bfile",
    "raw",
    "long raw",
    "rowid",
    "urowid",
  ],
};

export function getTypesForDialect(dialect: Dialect): string[] {
  return dialectTypeMap[dialect] || dialectTypeMap.general;
}